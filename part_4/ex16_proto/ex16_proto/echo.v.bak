module processor (sysclk, data_in, data_out);

	input				sysclk;		// system clock
	input [9:0]		data_in;		// 10-bit input data
	output [9:0] 	data_out;	// 10-bit output data

	wire				sysclk;
	wire [9:0]		data_in;
	reg [9:0] 		data_out;
	wire [9:0]		y, x,z,a;
	//reg [9:0]      y;

	parameter 		ADC_OFFSET = 10'h181;
	parameter 		DAC_OFFSET = 10'h200;

	assign x = data_in[9:0] - ADC_OFFSET;		// x is input in 2's complement
	
	
	//........................//
	
	wire full;

	assign z = a >>> 1;
	
	assign y = x + z;
		
	
	
	
	FIFO fifo (.clock(sysclk), .data(y), .rdreq(full), .wrreq(1'b1), .full(full), .q(a));
	

	/*
	always @ (*) begin
		if (full==1'b1) begin
			z <= 0.5 * a;
			y <= x + z;
		end
		else 
			y <= 10'b0000000000;
	end
			
	*/
	//........................//
	
	
	//  Now clock y output with system clock
	always @(posedge sysclk)
		data_out <=  y + DAC_OFFSET;
		
endmodule
	